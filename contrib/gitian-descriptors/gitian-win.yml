---
name: "bitcoin-abc-win"
enable_cache: true
distro: "debian"
suites:
- "buster"
architectures:
- "amd64"
packages:
- "autoconf"
- "automake"
- "bsdmainutils"
- "ca-certificates"
- "curl"
- "faketime"
- "g++"
- "g++-mingw-w64"
- "git"
- "libtool"
- "ninja-build"
- "mingw-w64"
- "nsis"
- "pkg-config"
- "python3"
- "zip"
repositories:
- "distribution": "buster-backports"
  "source": "deb http://deb.debian.org/debian/ buster-backports main"
  packages:
  - "cmake"
remotes:
- "url": "https://github.com/Bitcoin-ABC/bitcoin-abc.git"
  "dir": "bitcoin"
files: []
script: |
  WRAP_DIR=$HOME/wrapped
  HOSTS=(
    x86_64-w64-mingw32
  )

  # CMake toolchain file name differ from host name
  declare -A CMAKE_TOOLCHAIN_FILE
  CMAKE_TOOLCHAIN_FILE[x86_64-w64-mingw32]=Win64.cmake

  FAKETIME_HOST_PROGS="ar ranlib nm windres strip objcopy"
  FAKETIME_PROGS="date makensis zip"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in ${HOSTS[@]}; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  function create_per-host_linker_wrapper {
  # This is only needed for trusty, as the mingw linker leaks a few bytes of
  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900
  for i in ${HOSTS[@]}; do
    mkdir -p ${WRAP_DIR}/${i}
    for prog in collect2; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}/${prog}
        REAL=$(${i}-gcc -print-prog-name=${prog})
        echo "export MALLOC_PERTURB_=255" >> ${WRAP_DIR}/${i}/${prog}
        echo "${REAL} \$@" >> $WRAP_DIR/${i}/${prog}
        chmod +x ${WRAP_DIR}/${i}/${prog}
    done
    for prog in gcc g++; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "export COMPILER_PATH=${WRAP_DIR}/${i}" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_linker_wrapper "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd bitcoin
  SOURCEDIR=`pwd`
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in ${HOSTS[@]}; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_linker_wrapper "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  mkdir -p source_package
  pushd source_package
  # Any toolchain file will work for building the source package, just pick the
  # first one
  cmake -GNinja .. \
    -DCMAKE_TOOLCHAIN_FILE=${SOURCEDIR}/cmake/platforms/${CMAKE_TOOLCHAIN_FILE[${HOSTS[0]}]}

  ninja package_source
  SOURCEDIST=`echo bitcoin-abc-*.tar.gz`
  mv ${SOURCEDIST} ..
  popd
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`

  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar -xf ../$SOURCEDIST
  find bitcoin-abc-* | sort | tar --mtime="${REFERENCE_DATETIME}" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  mkdir -p $OUTDIR/src
  cp ../$SOURCEDIST $OUTDIR/src
  popd

  # Allow extra cmake option to be specified for each host
  declare -A CMAKE_EXTRA_OPTIONS
  CMAKE_EXTRA_OPTIONS[x86_64-w64-mingw32]="-DCPACK_PACKAGE_FILE_NAME=${DISTNAME}-win64-setup-unsigned"

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS[@]}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${WRAP_DIR}:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    cmake -GNinja .. \
      -DCMAKE_TOOLCHAIN_FILE=${SOURCEDIR}/cmake/platforms/${CMAKE_TOOLCHAIN_FILE[${i}]} \
      -DCLIENT_VERSION_IS_RELEASE=ON \
      -DENABLE_CLANG_TIDY=OFF \
      -DENABLE_REDUCE_EXPORTS=ON \
      -DBUILD_BITCOIN_SEEDER=OFF \
      -DCPACK_STRIP_FILES=ON \
      -DCMAKE_INSTALL_PREFIX=${INSTALLPATH} \
      -DCCACHE=OFF \
      ${CMAKE_EXTRA_OPTIONS[${i}]}

    ninja
    ninja security-check

    ninja install-debug

    ninja package

    cp -f bitcoin-abc-*-setup-unsigned.exe ${OUTDIR}/
    cd installed
    mkdir -p ${DISTNAME}/lib
    mv ${DISTNAME}/bin/*.dll* ${DISTNAME}/lib/
    find ${DISTNAME} -not -name "*.dbg"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip
    find ${DISTNAME} -name "*.dbg"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip
    cd ../../
    rm -rf distsrc-${i}
  done

  cd $OUTDIR
  mv ${OUTDIR}/${DISTNAME}-x86_64-*-debug.zip ${OUTDIR}/${DISTNAME}-win64-debug.zip
  mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip
