// Copyright (c) 2023 The Bitcoin developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

syntax = "proto3";

package chronik;

// Block on the blockchain
message Block {
    // Info about the block
    BlockInfo block_info = 1;
}

// Range of blocks
message Blocks {
    // Queried blocks
    repeated BlockInfo blocks = 1;
}

// Info about the state of the blockchain.
message BlockchainInfo {
    // Hash (little-endian) of the current tip
    bytes tip_hash = 1;
    // Height of the current tip (genesis has height = 0)
    int32 tip_height = 2;
}

// Info about the chronik software this server is running
message ChronikInfo {
    // chronik server version from chronik-http/Cargo.toml
    string version = 1;
}

// Info about a block
message BlockInfo {
    // Hash (little-endian)
    bytes hash = 1;
    // Hash of the previous block (little-endian)
    bytes prev_hash = 2;
    // Height in the chain
    int32 height = 3;
    // nBits field encoding the target
    uint32 n_bits = 4;
    // Timestamp field of the block
    int64 timestamp = 5;
    // Whether the block has been finalized by Avalanche
    bool is_final = 14;
    // Block size of this block in bytes (including headers etc.)
    uint64 block_size = 6;
    // Number of txs in this block
    uint64 num_txs = 7;
    // Total number of tx inputs in block (including coinbase)
    uint64 num_inputs = 8;
    // Total number of tx output in block (including coinbase)
    uint64 num_outputs = 9;
    // Total number of satoshis spent by tx inputs
    int64 sum_input_sats = 10;
    // Block reward for this block
    int64 sum_coinbase_output_sats = 11;
    // Total number of satoshis in non-coinbase tx outputs
    int64 sum_normal_output_sats = 12;
    // Total number of satoshis burned using OP_RETURN
    int64 sum_burned_sats = 13;
}

// Details about a transaction
message Tx {
    // TxId (little-endian) of the tx
    bytes txid = 1;
    // nVersion
    int32 version = 2;
    // Inputs of the tx (aka. `vin`)
    repeated TxInput inputs = 3;
    // Outputs of the tx (aka. `vout`)
    repeated TxOutput outputs = 4;
    // nLockTime
    uint32 lock_time = 5;
    // Which block this tx is in, or None, if in the mempool
    BlockMetadata block = 8;
    // Time this tx has first been added to the mempool, or 0 if unknown
    int64 time_first_seen = 9;
    // Serialized size of the tx
    uint32 size = 11;
    // Whether this tx is a coinbase tx
    bool is_coinbase = 12;
}

// UTXO of a script.
message ScriptUtxo {
    // txid and out_idx of the unspent output.
    OutPoint outpoint = 1;
    // Block height of the UTXO, or -1 if in mempool.
    int32 block_height = 2;
    // Whether the UTXO has been created in a coinbase tx.
    bool is_coinbase = 3;
    // Value of the output, in satoshis.
    int64 value = 5;
    // Whether the UTXO has been finalized by Avalanche.
    bool is_final = 10;
}

// COutPoint, points to a coin being spent by an input.
message OutPoint {
    // TxId of the tx of the output being spent.
    bytes txid = 1;
    // Index of the output spent within the transaction.
    uint32 out_idx = 2;
}

// Points to an input spending a coin.
message SpentBy {
    // TxId of the tx with the input.
    bytes txid = 1;
    // Index in the inputs of the tx.
    uint32 input_idx = 2;
}

// CTxIn, spends a coin.
message TxInput {
    // Reference to the coin being spent.
    OutPoint prev_out = 1;
    // scriptSig, script unlocking the coin.
    bytes input_script = 2;
    // scriptPubKey, script of the output locking the coin.
    bytes output_script = 3;
    // value of the output being spent, in satoshis.
    int64 value = 4;
    // nSequence of the input.
    uint32 sequence_no = 5;
}

// CTxOut, creates a new coin.
message TxOutput {
    // Value of the coin, in satoshis.
    int64 value = 1;
    // scriptPubKey, script locking the output.
    bytes output_script = 2;
    // Which tx and input spent this output, if any.
    SpentBy spent_by = 4;
}

// Data about a block which a Tx is in.
message BlockMetadata {
    // Height of the block the tx is in.
    int32 height = 1;
    // Hash of the block the tx is in.
    bytes hash = 2;
    // nTime of the block the tx is in.
    int64 timestamp = 3;
    // Whether the block has been finalized by Avalanche.
    bool is_final = 4;
}

// Page with txs
message TxHistoryPage {
    // Txs of the page
    repeated Tx txs = 1;
    // How many pages there are total
    uint32 num_pages = 2;
    // How many txs there are total
    uint32 num_txs = 3;
}

// List of UTXOs of a script
message ScriptUtxos {
    // The serialized script of the UTXOs
    bytes script = 1;
    // UTXOs of the script.
    repeated ScriptUtxo utxos = 2;
}

// Raw serialized tx.
message RawTx {
    // Bytes of the serialized tx.
    bytes raw_tx = 1;
}

// Subscription to WebSocket updates.
message WsSub {
    // Set this to `true` to unsubscribe from the event.
    bool is_unsub = 1;
    // What kind of updates to subscribe to.
    oneof sub_type {
        // Subscription to block updates
        WsSubBlocks blocks = 2;
        // Subscription to a script
        WsSubScript script = 3;
    }
}

// Subscription to blocks. They will be sent any time a block got connected,
// disconnected or finalized.
message WsSubBlocks {}

// Subscription to a script. They will be send every time a tx spending the
// given script or sending to the given script has been added to/removed from
// the mempool, or confirmed in a block.
message WsSubScript {
    // Script type to subscribe to ("p2pkh", "p2sh", "p2pk", "other").
    string script_type = 1;
    // Payload for the given script type:
    // - 20-byte hash for "p2pkh" and "p2sh"
    // - 33-byte or 65-byte pubkey for "p2pk"
    // - Serialized script for "other"
    bytes payload = 2;
}

// Message coming from the WebSocket
message WsMsg {
    // Kind of message
    oneof msg_type {
        // Error, e.g. when a bad message has been sent into the WebSocket.
        Error error = 1;
        // Block got connected, disconnected, finalized, etc.
        MsgBlock block = 2;
        // Tx got added to/removed from the mempool, or confirmed in a block.
        MsgTx tx = 3;
    }
}

// Block got connected, disconnected, finalized, etc.
message MsgBlock {
    // What happened to the block
    BlockMsgType msg_type = 1;
    // Hash of the block (little-endian)
    bytes block_hash = 2;
    // Height of the block
    int32 block_height = 3;
}

// Type of message for the block
enum BlockMsgType {
    // Block connected to the blockchain
    BLK_CONNECTED = 0;
    // Block disconnected from the blockchain
    BLK_DISCONNECTED = 1;
    // Block has been finalized by Avalanche
    BLK_FINALIZED = 2;
}

// Tx got added to/removed from mempool, or confirmed in a block, etc.
message MsgTx {
    // What happened to the tx
    TxMsgType msg_type = 1;
    // Txid of the tx (little-endian)
    bytes txid = 2;
}

// Type of message for a tx
enum TxMsgType {
    // Tx added to the mempool
    TX_ADDED_TO_MEMPOOL = 0;
    // Tx removed from the mempool
    TX_REMOVED_FROM_MEMPOOL = 1;
    // Tx confirmed in a block
    TX_CONFIRMED = 2;
    // Tx finalized by Avalanche
    TX_FINALIZED = 3;
}

// Empty msg without any data
message Empty {}

// Error message returned from our APIs.
message Error {
    // 2, as legacy chronik uses this for the message so we're still compatible.
    string msg = 2;
}
