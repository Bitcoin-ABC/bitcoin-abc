env:
  WIDEMUL: auto
  STATICPRECOMPUTATION: yes
  ECMULTGENPRECISION: auto
  ASM: no
  AUTOTOOLS_TARGET: check
  CMAKE_TARGET: check-secp256k1
  AUTOTOOLS_EXTRA_FLAGS:
  CMAKE_EXTRA_FLAGS:
  WITH_VALGRIND: yes
  HOST:
  ECDH: no
  RECOVERY: no
  SCHNORR: yes
  SCHNORRSIG: no
  EXPERIMENTAL: no
  JNI: no
  MULTISET: no
  CTIMETEST: yes
  BENCH: yes
  TEST_ITERS:
  BENCH_ITERS: 2
  MAKEFLAGS: -j2

cat_logs_snippet: &CAT_LOGS
  on_failure:
    cat_config_log_script:
      - cat config.log || true
    cat_test_env_script:
      - cat test_env.log || true
    cat_ci_env_script:
      - env

task:
  timeout_in: 120m
  name: "x86_64: Linux (Debian stable)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    # Reduce number of CPUs to be able to do more builds in parallel.
    cpu: 1
    # More than enough for our scripts.
    memory: 1G
  matrix: &ENV_MATRIX
    - env: {WIDEMUL:  int64,  RECOVERY: yes}
    - env: {WIDEMUL:  int64,                 ECDH: yes, EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128}
    - env: {WIDEMUL: int128,  RECOVERY: yes,            EXPERIMENTAL: yes,                SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,                 ECDH: yes, EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,  ASM: x86_64}
    - env: {                  RECOVERY: yes,            EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {                  STATICPRECOMPUTATION: no}
    - env: {AUTOTOOLS_TARGET: distcheck, CMAKE_TARGET: install, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}
    - env: {AUTOTOOLS_EXTRA_FLAGS: CPPFLAGS=-DDETERMINISTIC, CMAKE_EXTRA_FLAGS: -DCMAKE_C_FLAGS=-DDETERMINISTIC}
    - env: {AUTOTOOLS_EXTRA_FLAGS: CFLAGS=-O0, CMAKE_EXTRA_FLAGS: -DCMAKE_BUILD_TYPE=Debug, CTIMETEST: no}
    - env: {AUTOTOOLS_TARGET: check-java, CMAKE_TARGET: check-secp256k1-java, JNI: yes, ECDH: yes, EXPERIMENTAL: yes, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}
      # The Cirrus macOS VM has no java installed
      only_if: $CIRRUS_OS == 'linux'
    - env: {SCHNORR: no}
    - env: { ECMULTGENPRECISION: 2 }
    - env: { ECMULTGENPRECISION: 8 }
  matrix:
    - env:
        CC: gcc
    - env:
        CC: clang
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  name: "i686: Linux (Debian stable)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    HOST: i686-linux-gnu
    ECDH: yes
    RECOVERY: yes
    EXPERIMENTAL: yes
    SCHNORRSIG: yes
  matrix:
    - env:
        CC: i686-linux-gnu-gcc
    - env:
        CC: clang --target=i686-pc-linux-gnu -isystem /usr/i686-linux-gnu/include
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  timeout_in: 120m
  name: "arm64: macOS Ventura"
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    # Cirrus gives us a fixed number of 4 virtual CPUs. Not that we even have that many jobs at the moment...
    MAKEFLAGS: -j5
  matrix:
    << : *ENV_MATRIX
  env:
    ASM: no
    WITH_VALGRIND: no
    CTIMETEST: no
  matrix:
    - env:
        CC: gcc
    - env:
        CC: clang
  brew_script:
    - brew install automake cmake gcc libtool ninja
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  name: "s390x (big-endian): Linux (Debian stable, QEMU)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    WRAPPER_CMD: qemu-s390x
    TEST_ITERS: 16
    HOST: s390x-linux-gnu
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    EXPERIMENTAL: yes
    MULTISET: yes
    SCHNORRSIG: yes
    CTIMETEST: no
    AUTOTOOLS_TARGET:
  test_script:
    # https://sourceware.org/bugzilla/show_bug.cgi?id=27008
    - rm /etc/ld.so.cache
    - ./ci/build_autotools.sh
  << : *CAT_LOGS

# Sanitizers
task:
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    ECDH: yes
    RECOVERY: yes
    EXPERIMENTAL: yes
    MULTISET: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  matrix:
    - name: "Valgrind (memcheck)"
      env:
        # The `--error-exitcode` is required to make the test fail if valgrind
        # found errors, otherwise it'll return 0
        # (https://www.valgrind.org/docs/manual/manual-core.html)
        WRAPPER_CMD: "valgrind --error-exitcode=42"
        TEST_ITERS: 16
        AUTOTOOLS_TARGET:
        CMAKE_TARGET: "secp256k1-tests secp256k1-exhaustive_tests"
    - name: "UBSan, ASan, LSan"
      env:
        CFLAGS: "-fsanitize=undefined,address"
        CFLAGS_FOR_BUILD: "-fsanitize=undefined,address"
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
        ASAN_OPTIONS: "strict_string_checks=1:detect_stack_use_after_return=1:detect_leaks=1"
        LSAN_OPTIONS: "use_unaligned=1"
        TEST_ITERS: 32
  # Try to cover many configurations with just a tiny matrix.
  matrix:
    - env:
        STATICPRECOMPUTATION: yes
    - env:
        STATICPRECOMPUTATION: no
        ECMULTGENPRECISION: 2
  matrix:
    - env:
        CC: clang
    - env:
        HOST: i686-linux-gnu
        CC: i686-linux-gnu-gcc
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  name: "C++ -fpermissive"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    # ./configure correctly errors out when given CC=g++.
    # We hack around this by passing CC=g++ only to make.
    CC: gcc
    MAKEFLAGS: -j2 CC=g++
    AUTOTOOLS_EXTRA_FLAGS: CFLAGS=-fpermissive
    WERROR_CFLAGS:
    EXPERIMENTAL: yes
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
  test_script:
    - ./ci/build_autotools.sh
  << : *CAT_LOGS
