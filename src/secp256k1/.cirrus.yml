env:
  WIDEMUL: auto
  STATICPRECOMPUTATION: yes
  ECMULTGENPRECISION: auto
  ASM: no
  AUTOTOOLS_TARGET: check
  CMAKE_TARGET: check-secp256k1
  AUTOTOOLS_EXTRA_FLAGS:
  CMAKE_EXTRA_FLAGS:
  WITH_VALGRIND: yes
  RUN_VALGRIND: no
  HOST:
  ECDH: no
  RECOVERY: no
  SCHNORR: yes
  SCHNORRSIG: no
  EXPERIMENTAL: no
  JNI: no
  OPENSSL_TESTS: auto
  MULTISET: no
  CTIMETEST: yes
  BENCH: yes
  ITERS: 2
  MAKEFLAGS: -j2

cat_logs_snippet: &CAT_LOGS
  on_failure:
    cat_config_log_script:
      - cat config.log || true
    cat_test_env_script:
      - cat test_env.log || true
    cat_ci_env_script:
      - env

task:
  timeout_in: 120m
  name: "x86_64: Linux (Debian stable)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    # Reduce number of CPUs to be able to do more builds in parallel.
    cpu: 1
    # More than enough for our scripts.
    memory: 1G
  matrix: &ENV_MATRIX
    - env: {WIDEMUL:  int64,  RECOVERY: yes}
    - env: {WIDEMUL:  int64,                 ECDH: yes, EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128}
    - env: {WIDEMUL: int128,  RECOVERY: yes,            EXPERIMENTAL: yes,                SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,                 ECDH: yes, EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,  ASM: x86_64}
    - env: {                  RECOVERY: yes,            EXPERIMENTAL: yes, MULTISET: yes, SCHNORRSIG: yes}
    - env: {                  STATICPRECOMPUTATION: no}
    - env: {AUTOTOOLS_TARGET: distcheck, CMAKE_TARGET: install, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}
    - env: {AUTOTOOLS_EXTRA_FLAGS: CPPFLAGS=-DDETERMINISTIC, CMAKE_EXTRA_FLAGS: -DCMAKE_C_FLAGS=-DDETERMINISTIC}
    - env: {AUTOTOOLS_EXTRA_FLAGS: CFLAGS=-O0, CMAKE_EXTRA_FLAGS: -DCMAKE_BUILD_TYPE=Debug, CTIMETEST: no}
    - env: {AUTOTOOLS_TARGET: check-java, CMAKE_TARGET: check-secp256k1-java, JNI: yes, ECDH: yes, EXPERIMENTAL: yes, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}
      # The Cirrus macOS VM has no java installed
      only_if: $CIRRUS_OS == 'linux'
    - env: {SCHNORR: no}
    - env:
        CFLAGS:  "-fsanitize=undefined -fno-omit-frame-pointer"
        LDFLAGS: "-fsanitize=undefined -fno-omit-frame-pointer"
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
        ASM: x86_64
        ECDH: yes
        RECOVERY: yes
        EXPERIMENTAL: yes
        MULTISET: yes
        SCHNORRSIG: yes
        CTIMETEST: no
    - env: { ECMULTGENPRECISION: 2 }
    - env: { ECMULTGENPRECISION: 8 }
    - env:
        RUN_VALGRIND: yes
        ASM: x86_64
        ECDH: yes
        RECOVERY: yes
        EXPERIMENTAL: yes
        MULTISET: yes
        SCHNORRSIG: yes
        OPENSSL_TESTS: no
        AUTOTOOLS_TARGET:
        CMAKE_TARGET: "secp256k1-tests secp256k1-exhaustive_tests"
  matrix:
    - env:
        CC: gcc
    - env:
        CC: clang
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  name: "i686: Linux (Debian stable)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    HOST: i686-linux-gnu
    ECDH: yes
    RECOVERY: yes
    EXPERIMENTAL: yes
    SCHNORRSIG: yes
    OPENSSL_TESTS: no
  matrix:
    - env:
        CC: i686-linux-gnu-gcc
    - env:
        CC: clang --target=i686-pc-linux-gnu -isystem /usr/i686-linux-gnu/include
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  timeout_in: 120m
  name: "x86_64: macOS Catalina"
  macos_instance:
    image: catalina-base
  env:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    # Cirrus gives us a fixed number of 12 virtual CPUs. Not that we even have that many jobs at the moment...
    MAKEFLAGS: -j13
  matrix:
    << : *ENV_MATRIX
  matrix:
    - env:
        CC: gcc-9
    - env:
        CC: clang
  # Update Command Line Tools
  # Uncomment this if the Command Line Tools on the CirrusCI macOS image are too old to brew valgrind.
  # See https://apple.stackexchange.com/a/195963 for the implementation.
  ## update_clt_script:
  ##   - system_profiler SPSoftwareDataType
  ##   - touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  ##   - |-
  ##     PROD=$(softwareupdate -l | grep "*.*Command Line" | tail -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | sed 's/Label: //g' | tr -d '\n')
  ##   # For debugging
  ##   - softwareupdate -l && echo "PROD: $PROD"
  ##   - softwareupdate -i "$PROD" --verbose
  ##   - rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  ##
  brew_valgrind_pre_script:
    - brew config
    - brew tap --shallow LouisBrunner/valgrind
    # Fetch valgrind source but don't build it yet.
    - brew fetch --HEAD LouisBrunner/valgrind/valgrind
  brew_valgrind_cache:
    # This is $(brew --cellar valgrind) but command substition does not work here.
    folder: /usr/local/Cellar/valgrind
    # Rebuild cache if ...
    fingerprint_script:
      # ... macOS version changes:
      - sw_vers
      # ... brew changes:
      - brew config
      # ... valgrind changes:
      - git -C "$(brew --cache)/valgrind--git" rev-parse HEAD
    populate_script:
      # If there's no hit in the cache, build and install valgrind.
      - brew install --HEAD LouisBrunner/valgrind/valgrind
  brew_valgrind_post_script:
    # If we have restored valgrind from the cache, tell brew to create symlink to the PATH.
    # If we haven't restored from cached (and just run brew install), this is a no-op.
    - brew link valgrind
  brew_script:
    - brew install automake cmake gcc@9 libtool ninja
  test_script:
    - ./ci/build_autotools.sh
    - ./ci/build_cmake.sh
  << : *CAT_LOGS

task:
  name: "s390x (big-endian): Linux (Debian stable, QEMU)"
  container:
    dockerfile: ci/linux-debian.Dockerfile
    cpu: 1
    memory: 1G
  env:
    QEMU_CMD: qemu-s390x
    HOST: s390x-linux-gnu
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    EXPERIMENTAL: yes
    MULTISET: yes
    SCHNORRSIG: yes
    OPENSSL_TESTS: no
    CTIMETEST: no
    AUTOTOOLS_TARGET:
  test_script:
    # https://sourceware.org/bugzilla/show_bug.cgi?id=27008
    - rm /etc/ld.so.cache
    - ./ci/build_autotools.sh
  << : *CAT_LOGS
